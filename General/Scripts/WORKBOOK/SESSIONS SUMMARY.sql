-- SESSIONS PRACTICE
-- SESSION 1
CREATE TABLE FRIENDS
(NAME VARCHAR(20) NOT NULL,
AGE SMALLINT,
BIRTHDATE DATE);

CREATE TABLE COUNTRY
(NAME VARCHAR(50) NOT NULL,
CAPITAL VARCHAR(40)NOT NULL,
POPULATION INTEGER DEFAULT 1000000);

CREATE TABLE CARS
(PLATE CHAR(10) NOT NULL,
BRAND VARCHAR(25) NOT NULL,
COLOR VARCHAR(20) NOT NULL,
YEAR SMALLINT NOT NULL,
IS_ELECTRIC BOOLEAN NOT NULL DEFAULT FALSE,
DATE_BOUGHT DATE NOT NULL DEFAULT CURRENT DATE,
DATE_SOLD DATE);

DROP TABLE FRIENDS;
DROP TABLE COUNTRY;
DROP TABLE CARS;


-- SESSION 2
CREATE TABLE EMPLOYEES
(NAME VARCHAR(20),
EMPLOYEE_NUMBER INTEGER,
DEPARTMENT CHAR(3),
SALARY DECIMAL(8, 2));

INSERT INTO EMPLOYEES
(NAME, EMPLOYEE_NUMBER, DEPARTMENT, SALARY)
VALUES ('Spencer Wood', 560, '100', 5.23);

INSERT INTO EMPLOYEES
(NAME, EMPLOYEE_NUMBER, DEPARTMENT, SALARY)
VALUES ('Spencer Wood', 560, '100', 5.23),
		('Spencer Wood', 560, '100', 5.23),
		('Spencer Wood', 560, '100', 5.23),
		('Spencer Wood', 560, '100', 5.23);
		
CREATE TABLE T1
(C1 VARCHAR(25) NOT NULL,
C2 BOOLEAN NOT NULL);

INSERT INTO T1 
VALUES ('A1',TRUE),('B1',FALSE);
INSERT INTO T1 
VALUES ('A2',1),('B2',0);

INSERT INTO T1 
VALUES ('A3',25),('B3',-25); -- This works because it accepts ANY number AS TRUE but IF it IS a zero THEN it IS FALSE

INSERT INTO T1 VALUES ('A4','1'),('B4','0');
INSERT INTO T1 VALUES ('A5','TRUE'),('B5','FALSE');
INSERT INTO T1 VALUES ('A6','25'),('B6','-25');

CREATE TABLE T2 (
C1 INTEGER NOT NULL,
C2 CHAR(10),
C3 VARCHAR(5) NOT NULL WITH DEFAULT 'OK')

INSERT INTO T2 (C1, C2, C3)
VALUES (1, NULL, 'ERROR')

INSERT INTO T2 (C1, C2, C3)
VALUES (1, NULL, 'ERROR')

INSERT INTO T2 (C1, C2, C3)
VALUES (1, NULL, 'ERROR')

INSERT INTO T2 (C1, C3)
VALUES (1, DEFAULT)

INSERT INTO T2 (C1, C2)
VALUES (1, DEFAULT) -- This will WORK AS DEFAULT will just be shown AS NULL 

DELETE FROM EMPLOYEES; -- Deletes ALL ROWS

DELETE FROM EMPLOYEES
WHERE NAME = 'Spencer Wood'; -- Deletes just people WITH the name Spencer

DELETE FROM EMPLOYEES
WHERE COMMISION = 0;

DELETE FROM EMPLOYEES
WHERE SALARY > 65000
AND AGE > 50;

UPDATE EMPLOYEES
SET SALARY = SALARY + 10; -- Adds 10 TO everyones salary

UPDATE EMPLOYEES
SET SALARY = SALARY + 10000
WHERE NAME='CARLOS'

UPDATE EMPLOYEES
SET COMM = COMM + 100
WHERE COMM = 0

UPDATE EMPLOYEES
SET COMM = 0,
BONUS = 10000
WHERE JOB = 'MANAGER'

CREATE TABLE COUNTRY
(NAME VARCHAR(50),
CAPITAL CHAR(40),
POPULATION INTEGER);

INSERT INTO COUNTRY VALUES 
('Spain', 'Madrid', 45000000),
('France', 'Paris', 40000000);

UPDATE COUNTRY
SET POPULATION = 65000000
WHERE NAME = 'France';

DELETE COUNTRY
WHERE CAPITAL = 'Madrid';


-- SESSION 3
CREATE TABLE T1 (
C1 INTEGER,
C2 CHAR(10));

SELECT C1, C2
FROM T1;

SELECT *
FROM T1;

SELECT *
FROM T1
WHERE C1 > 5;

SELECT NAME, AGE
FROM STUDENTS
WHERE COUNTRY = 'Germany'
AND AGE < 27;

SELECT *
FROM STUDENTS
WHERE COUNTRY = 'India'
AND AGE > 31;

SELECT *
FROM (SELECT * FROM STUDENTS ORDER BY AGE LIMIT 5)
ORDER BY COUNTRY;

SELECT *
FROM STUDENTS
WHERE COUNTRY = 'France' OR COUNTRY = 'Spain'
ORDER BY AGE DESC
LIMIT 5;

INSERT INTO TABLE_1 (COLUMN1, COLUMN2)
VALUES (VALUE1, VALUE2);

UPDATE TABLE_1
SET COLUMN_1 = VALUE3
WHERE COLUMN_1 = VALUE4;

DELETE TABLE_1
COLUMN_1 = VALUE1;

SELECT COLUMNS
FROM TABLE_1
WHERE COLUMN_1 = VALUE1
ORDER BY COLUMNS;


-- SESSION 4
CREATE TABLE COUNTRIES (
NAME VARCHAR(50) NOT NULL,
CAPITAL CHAR(40),
POPULATION BIGINT,
CONTINENT VARCHAR(10))

SELECT NAME FROM COUNTRIES
WHERE POPULATION > (SELECT POPULATION * 1.2
FROM COUNTRIES
WHERE NAME='France')

SELECT NAME
FROM COUNTRIES
WHERE POPULATION IS NULL;

SELECT NAME
FROM COUNTRIES
WHERE POPULATION IS NOT NULL;

SELECT NAME
FROM COUNTRIES 
WHERE POPULATION IS NULL
AND CAPITAL IS NOT NULL;

SELECT CAPITAL
FROM COUNTRIES
WHERE NAME IN ('France', 'Spain', 'United States');

SELECT CAPITAL
FROM COUNTRIES
WHERE POPULATION IN (1000000, 2000000, 3000000); -- It IS basically LIKE an OR STATEMENT placed many times

SELECT NAME
FROM COUNTRIES
WHERE POPULATION BETWEEN 1000000 AND 5000000;

SELECT NAME
FROM COUNTRIES
WHERE NAME LIKE 'United%';

SELECT NAME
FROM COUNTRIES
WHERE NAME LIKE '%Republic%';

SELECT NAME
FROM COUNTRIES
WHERE NAME LIKE '%nia';

SELECT NAME
FROM COUNTRIES
WHERE NAME LIKE 'Un_ted%';

SELECT NAME
FROM COUNTRIES
WHERE NAME BETWEEN 'A' AND 'C';

SELECT CAPITAL FROM COUNTRIES
WHERE RTRIM(CAPITAL) LIKE '%City'; -- FOR CHAR CHARACTERS, they expect an ending AND therefore you need TO use this clause

<predicate1> AND ( <predicate2> OR <predicate3> ) AND <predicate4>
<predicate1> AND ( <predicate2> OR <predicate3> ) -- Put parinthesis around the OR statements


-- SESSION 5
CREATE TABLE COUNTRIES (
NAME VARCHAR(50) NOT NULL,
CAPITAL CHAR(40),
POPULATION BIGINT,
CONTINENT VARCHAR(10))

SELECT NAME, LENGTH(CAPITAL)
FROM COUNTRIES;

SELECT NAME
FROM COUNTRIES
WHERE LENGTH(NAME) = 10;

SELECT LOWER(NAME)
FROM COUNTRIES
WHERE UPPER(NAME) LIKE 'UNITED%';

SELECT NAME
FROM COUNTRIES
WHERE SUBSTRING(UPPER(NAME), 1, 6) = 'UNITED';

SELECT EMPNO, SUBSTRING(HIREDATE, 1, 4)
FROM EMPLOYEE
WHERE SUBSTRING(HIREDATE, 1, 4) BETWEEN 2020 AND 2029
AND JOB LIKE 'SALESMAN %';

SELECT WORKDEPT, LASTNAME, COALESCE(SALARY, 0) + COALESCE(BONUS, 0) + COALESCE(COMM, 0) AS TOTAL_SALARY
FROM EMPLOYEE
WHERE WORKDEPT IN ('C00', 'D00');

SELECT FIRSTNME, REPLACE(MIDINIT, MIDINIT, 'X'), LASTNAME
FROM EMPLOYEE
WHERE JOB = 'MANAGER' AND GENDER = 'F';

SELECT REPLACE(FIRSTNME, SUBSTRING(FIRSTNME, LENGTH(FIRSTNME) -2), 'xxx'), MIDINIT, LASTNAME
FROM EMPLOYEE
WHERE GENDER = 'M' AND JOB = 'MANAGER';

SELECT LOCATE ('UNITED',NAME) FROM COUNTRIES; -- Obtain START POSITION OF UNITED IN name countries AND IF NOT contained THEN RETURN 0
-- LOCATE(substring, string, start) Locates the position of the substring in the string

SELECT CONCAT(NAME, CAPITAL)
FROM COUNTRIES;

SELECT NAME || POPULATION
FROM COUNTRIES;

SELECT NAME || ',' || POPULATION || ',' || CAPITAL 
FROM COUNTRIES;

SELECT LOWER(SUBSTRING(FIRSTNME, 1, 1)) || UPPER(SUBSTRING(FIRSTNME, 2, 1)) || SUBSTRING(FIRSTNME, 3)
FROM EMPLOYEE
WHERE GENDER = 'F';

SELECT CURRENT TIMESTAMP;

SELECT DAY(CURRENT DATE), DAYNAME(CURRENT DATE), MONTHNAME(CURRENT DATE);

SELECT CURRENT TIME, SECOND(CURRENT TIME), MIDNIGHT_SECONDS(CURRENT TIME);

DAY()
MONTH()
YEAR()
HOUR()
MINUTE()
SECOND()
MICROSECOND()

DAYNAME()
DAYOFWEEK()
DAYOFYEAR()
WEEK()
MONTHNAME()
MIDNIGHT_SECONDS()

SELECT CAST(POPULATION AS VARCHAR(10))
FROM COUNTRIES;

SELECT VARCHAR(POPULATION)
FROM COUNTRIES;

SELECT DECIMAL(POPULATION);

SELECT FLOAT(POPULATION);

SELECT DECIMAL(POPULATION, 16, 4);

SMALLINT( expression )
INTEGER( expression )
BIGINT( expression )
DECIMAL( expression )
FLOAT ( expression )

CHAR ( expression )
VARCHAR ( expression )

DATE ( expression )
TIME ( expression )
TIMESTAMP ( expression )

DECIMAL (expression, scale, precision)
CHAR (expression, length)
VARCHAR (expression, length)

SELECT STORE, SUBSTRING(STORE, 1, 3) AS CITY
FROM SALES;

SELECT STORE,
CASE
WHEN STORE LIKE 'NYC%' THEN 'New York City'
WHEN STORE LIKE 'MAD%' THEN 'Madison'
WHEN STORE LIKE 'ORL%' THEN 'Orlando'
ELSE 'Unknown'
END as CITY
FROM SALES;

SELECT STORE, DAYNAME(SALEDATE) as DAYNAME,
CASE DAYNAME(SALEDATE)
WHEN 'Saturday' THEN 'Weekend'
WHEN 'Sunday' THEN 'Weekend'
ELSE 'Workday'
END as DAYTYPE
FROM SALES;


-- SESSION 6
CREATE TABLE COUNTRIES (
NAME VARCHAR(50) NOT NULL,
CAPITAL CHAR(40) NOT NULL,
POPULATION BIGINT);

SELECT MAX(POPULATION), MIN(POPULATION)
FROM EMPLOYEE;

SELECT NAME FROM COUNTRIES
WHERE POPULATION = (SELECT MAX(POPULATION)
FROM COUNTRIES);

SELECT MAX(AGE) AS MAX, MIN(AGE) AS MIN
FROM STUDENTS;

SELECT COUNT(*), AVG(AGE)
FROM STUDENTS
WHERE UPPER(COUNTRY) LIKE 'A%';

SELECT * FROM STUDENTS
where age = (select max(age) from students)
or age = (select min(age) from students)
order by age;

SELECT DISTINCT COUNTRY 
FROM STUDENTS;

SELECT COUNT (DISTINCT COUNTRY)
FROM STUDENTS;

SELECT COUNT(DISTINCT COUNTRY)
FROM STUDENTS
WHERE AGE < 22;

SELECT COUNT(DISTINCT SUBSTRING(NAME, 1, 1))
FROM STUDENTS;

CREATE TABLE CLASS (
STUDENT VARCHAR(20) NOT NULL,
SCORE SMALLINT);

INSERT INTO CLASS VALUES
('Luna',100),
('Lily',null),
('Leah',100),
('Lydia',100),
('Liliana',null),
('Layla',100),
('Lillian',100),
('Lucy',100),
('Leilani',100),
('Lyla',100);

SELECT COUNT(*)
FROM CLASS;

SELECT COUNT(SCORE)
FROM CLASS;

SELECT SUM(COALESCE(SCORE, 0)), MAX(SCORE), MIN(SCORE)
FROM CLASS;

SELECT COUNT(*) AS TOTAL_COUNT, COUNT(SCORE)
FROM CLASS;

SELECT COUNT(SCORE), AVG(SCORE)
FROM CLASS;

SELECT COUNT(*), AVG(COALESCE(SCORE, 0))
FROM CLASS;


-- SESSION 7
SELECT <select list>
FROM <table>
WHERE <predicates>
ORDER BYâ€¦
GROUP BY <expression>
-- These predicates can only reference columns or expression used in the GROUP BY clause.
SELECT CONTINENT, SUM(POPULATION), COUNT(*)
FROM COUNTRIES
GROUP BY CONTINENT
HAVING CONTINENT = 'AMERICA';

SELECT CONTINENT, SUM(POPULATION), COUNT(*)
FROM COUNTRIES
GROUP BY CONTINENT
HAVING COUNT(*) > 2;

SELECT SUBSTR(CONTINENT,1,2), SUM(POPULATION)
FROM COUNTRIES
GROUP BY CONTINENT;

SELECT CONTINENT, SUM(POPULATION)
FROM COUNTRIES
GROUP BY CONTINENT
HAVING COUNT(POPULATION) < 40;


















